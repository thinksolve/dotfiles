--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- Keep a history of the clipboard for text entries and manage the entries with a context menu
--
-- Originally based on TextClipboardHistory.spoon by Diego Zamboni with additional functions provided by a context menu
-- and on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).
--
-- Download: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipboardTool.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipboardTool.spoon.zip)
---@class spoon.ClipboardTool
local M = {}
spoon.ClipboardTool = M

-- Binds hotkeys for ClipboardTool
--
-- Parameters:
--  * mapping - A table containing hotkey objifier/key details for the following items:
--   * show_clipboard - Display the clipboard history chooser
--   * toggle_clipboard - Show/hide the clipboard history chooser
function M:bindHotkeys(mapping, ...) end

-- If the pasteboard has changed, we add the current item to our history and update the counter
--
-- Parameters:
--  * None
function M:checkAndStorePasteboard() end

-- Clears the clipboard and history
--
-- Parameters:
--  * None
function M:clearAll() end

-- Clears the last added to the history
--
-- Parameters:
--  * None
function M:clearLastItem() end

-- Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.
M.deduplicate = nil

-- Number of characters to which each clipboard item will be truncated, when displaying in the menu. This only truncates in display, the full content will be used for searching and for pasting.
M.display_max_length = nil

-- Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.
M.frequency = nil

-- How many items to keep on history. Defaults to 100
M.hist_size = nil

-- If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `ClipboardTool.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`
M.honor_ignoredidentifiers = nil

-- Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.
--
-- Notes:
--  * Default value (don't modify unless you know what you are doing):
-- ```
--  {
--     ["de.petermaurer.TransientPasteboardType"] = true, -- Transient : Textpander, TextExpander, Butler
--     ["com.typeit4me.clipping"]                 = true, -- Transient : TypeIt4Me
--     ["Pasteboard generator type"]              = true, -- Transient : Typinator
--     ["com.agilebits.onepassword"]              = true, -- Confidential : 1Password
--     ["org.nspasteboard.TransientType"]         = true, -- Universal, Transient
--     ["org.nspasteboard.ConcealedType"]         = true, -- Universal, Concealed
--     ["org.nspasteboard.AutoGeneratedType"]     = true, -- Universal, Automatic
--  }
-- ```
M.ignoredIdentifiers = nil

-- Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.
M.logger = nil

-- maximum size of a text entry
M.max_entry_size = nil

-- Whether to check the maximum size of an entry. Defaults to `false`.
M.max_size = nil

-- String to show in the menubar if `ClipboardTool.show_in_menubar` is `true`. Defaults to `"\u{1f4cb}"`, which is the [Unicode clipboard character](https://codepoints.net/U+1F4CB)
M.menubar_title = nil

-- Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.
M.paste_on_select = nil

-- Add the given string to the history
--
-- Parameters:
--  * item - string to add to the clipboard history
--
-- Returns:
--  * None
function M:pasteboardToClipboard(item, ...) end

-- Verify whether the pasteboard contents matches one of the values in `ClipboardTool.ignoredIdentifiers`
--
-- Parameters:
--  * None
function M:shouldBeStored() end

-- If `true`, show an alert when a new item is added to the history, i.e. has been copied.
M.show_copied_alert = nil

-- Whether to show a menubar item to open the clipboard history. Defaults to `true`
M.show_in_menubar = nil

-- Display the current clipboard list in a chooser
--
-- Parameters:
--  * None
function M:showClipboard() end

-- Start the clipboard history collector
--
-- Parameters:
--  * None
function M:start() end

-- Show/hide the clipboard list, depending on its current state
--
-- Parameters:
--  * None
function M:toggleClipboard() end

-- Toggle the value of `ClipboardTool.paste_on_select`
--
-- Parameters:
--  * None
function M:togglePasteOnSelect() end

